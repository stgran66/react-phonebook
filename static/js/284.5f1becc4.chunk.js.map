{"version":3,"file":"static/js/284.5f1becc4.chunk.js","mappings":"iOAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mJASVE,EAAmBF,EAAAA,GAAAA,MAAH,6FAMhBG,GAAmBH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6RAiBhBK,GAAiBL,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAH,wG,6BCvBrBO,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGNC,EAASC,EAAAA,KAAaC,MAAM,CAChCJ,MAAOG,EAAAA,KAAaH,MAAM,4BAA4BK,WACtDJ,SAAUE,EAAAA,KAEPG,IAAI,EAAG,qDACPD,aAGQE,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAKjB,OACE,SAAC,KAAD,CACEV,cAAeA,EACfW,SANiB,SAACC,EAAD,GAA2B,EAAhBC,UAC9BJ,GAASK,EAAAA,EAAAA,IAAMF,GAChB,EAKGG,iBAAkBZ,EAClBa,kBAAkB,EAClBC,gBAAgB,EALlB,UAOE,UAACzB,EAAD,YACE,UAACG,EAAD,qBAEE,SAACC,EAAD,CAAkBsB,KAAK,QAAQC,KAAK,cAEtC,SAACrB,EAAD,CAAgBqB,KAAK,QAAQC,UAAU,OAEvC,UAACzB,EAAD,wBAEE,SAACC,EAAD,CAAkBsB,KAAK,WAAWC,KAAK,iBAEzC,SAACrB,EAAD,CAAgBqB,KAAK,WAAWC,UAAU,OAC1C,SAAC,KAAD,CAAQF,KAAK,SAAb,wBAIP,E,UClDc,SAASG,IACtB,IAAMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IAE1B,OACE,UAAC,KAAD,YACE,oCACA,SAAChB,EAAD,IACCc,IAAS,uBAAIA,MAGnB,C","sources":["components/LoginForm/LoginForm.styled.jsx","components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  margin-top: 26px;\n  display: flex;\n  flex-direction: column;\n  gap: 25px;\n  width: 310px;\n  align-items: flex-end;\n`;\n\nexport const ContactFormLabel = styled.label`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nexport const ContactFormInput = styled(Field)`\n  color: #f0a00c;\n  font-family: cursive;\n  border: 1px solid black;\n  padding-top: 2px;\n  padding-bottom: 2px;\n  padding-left: 8px;\n  padding-right: 8px;\n  outline: none;\n  border-radius: 6px;\n\n  :hover,\n  :focus {\n    border-color: #f0a00c;\n  }\n`;\n\nexport const StyledErrorMsg = styled(ErrorMessage)`\n  margin: 0;\n  font-size: 12px;\n  color: #ac3235;\n  align-self: flex-start;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  StyledForm,\n  ContactFormLabel,\n  ContactFormInput,\n  StyledErrorMsg,\n} from './LoginForm.styled';\nimport { Button } from '../Common.styled';\nimport { logIn } from 'redux/auth/operations';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst schema = yup.object().shape({\n  email: yup.string().email('Please enter valid email').required(),\n  password: yup\n    .string()\n    .min(6, 'Password is too short -should be at least 6 chars')\n    .required(),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n\n  const HandleSubmit = (values, { resetForm }) => {\n    dispatch(logIn(values));\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={HandleSubmit}\n      validationSchema={schema}\n      validateOnChange={false}\n      validateOnBlur={true}\n    >\n      <StyledForm>\n        <ContactFormLabel>\n          Email:\n          <ContactFormInput type=\"email\" name=\"email\" />\n        </ContactFormLabel>\n        <StyledErrorMsg name=\"email\" component=\"p\" />\n\n        <ContactFormLabel>\n          Password:\n          <ContactFormInput type=\"password\" name=\"password\" />\n        </ContactFormLabel>\n        <StyledErrorMsg name=\"password\" component=\"p\" />\n        <Button type=\"submit\">Log in</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { Content } from 'components/Common.styled';\nimport { useSelector } from 'react-redux';\nimport { selectError } from 'redux/auth/selectors';\n\nexport default function Login() {\n  const error = useSelector(selectError);\n\n  return (\n    <Content>\n      <h2>Log in</h2>\n      <LoginForm />\n      {error && <b>{error}</b>}\n    </Content>\n  );\n}\n"],"names":["StyledForm","styled","Form","ContactFormLabel","ContactFormInput","Field","StyledErrorMsg","ErrorMessage","initialValues","email","password","schema","yup","shape","required","min","LoginForm","dispatch","useDispatch","onSubmit","values","resetForm","logIn","validationSchema","validateOnChange","validateOnBlur","type","name","component","Login","error","useSelector","selectError"],"sourceRoot":""}